import {ColumnTransposition, Matrix, OTP, A5_1} from "./classes";
import { HillCipher } from "./classes/Substitution/HillCipher";
const a = [
    [-1, 1.5],
    [1, -1]
]
const b = [
    [0, 4, 0, 7, 4, 1],
    [0, 8, 0, 1, 8, 7],
    [9, 6, 8, 0, 5, 4],
    [8, 7, 5, 7, 3, 4],
    [0, 9, 1, 6, 1, 3],
    [9, 4, 3, 4, 5, 4],
]
const matA = new Matrix(a);
const matB = new Matrix(b);
// console.log(matA.multiply(matB).determinant());
// console.log(matB.determinant());
// console.log(matA.invert().Matrix);
// // console.log(matB.swapColumn(0, 2).Matrix);
// console.log(HillCipher.encrypt("ZASTITAXINFORMACIONIHXSISTEMAX", matB));
// console.log("CIRDPDJXXZCPEAJCOTNBFAZUBNKFEA" === "CIRDPDJXXZCPEAJCOTNBFAZUBNKFEA")

// OTP.encrypt("Zastita Informacionih Sistema");

// const t = [];
// const n = 5;
// t.push(Math.round(Math.random() * Math.pow(2, n)).toString(2).split("").map(bit => parseInt(bit)).flat());
// console.log(t);

// for(let i  0; i < Math.pow(2, n) + 1; i++) {
//     let newTakt: an = [...t[t.lngth - ]];
//     le newBit = newTakt[0] ^ newTakt[newTakt.length - 1];
//     neTakt.unshift(newBit)
//     newTakt.pop()
//     t.push(newTkt);
// }
// console.table(t);

//
//    takt   0  1  2  3  4 
//     0     1  1  1  0  0 
//     1     1  1  1  1  0 
//     2     1  1  1  1  1 
//     3     0  1  1  1  1 
//     4     1  0  1  1  1 
//     5     0  1  0  1  1 
//     6     1  0  1  0  1 
//     7     0  1  0  1  0 
//     8     0  0  1  0  1 
//     9     1  0  0  1  0 
//    10     1  1  0  0  1 
//    11     0  1  1  0  0 
//    12     0  0  1  1  0 
//    13     0  0  0  1  1 
//    14     1  0  0  0  1 
//    15     0  1  0  0  0 
//    16     0  0  1  0  0 
//    17     0  0  0  1  0 
//    18     0  0  0  0  1 
//    19     1  0  0  0  0 
//    20     1  1  0  0  0 
//    21     1  1  1  0  0 
//    22     1  1  1  1  0 
//    23     1  1  1  1  1 
//    24     0  1  1  1  1 
//    25     1  0  1  1  1 
//    26     0  1  0  1  1 
//    27     1  0  1  0  1 
//    28     0  1  0  1  0 
//    29     0  0  1  0  1 
//    30     1  0  0  1  0 
//    31     1  1  0  0  1 
//    32     0  1  1  0  0 
//    33     0  0  1  1  0 

// A5_1.generateKey(23);

// takt:  0
//   x   1  1  1  1  1  0  0  0  0  0  0   1   1   0   1   0   0   1   1                  
//   y   1  1  0  1  1  0  0  1  0  0  1   0   1   1   1   1   1   1   0   1   1   1      
//   z   0  1  0  0  1  1  0  0  1  1  1   1   1   0   1   0   1   1   0   1   0   1   0  
//   s                                                                                    
// takt:  1
//   x   1  1  1  1  1  0  0  0  0  0  0   1   1   0   1   0   0   1   1                  
//   y   1  1  1  0  1  1  0  0  1  0  0   1   0   1   1   1   1   1   1   0   1   1      
//   z   1  0  1  0  0  1  1  0  0  1  1   1   1   1   0   1   0   1   1   0   1   0   1  
//   s   0                                                                                
// takt:  2
//   x   0  1  1  1  1  1  0  0  0  0  0   0   1   1   0   1   0   0   1                  
//   y   1  1  1  1  0  1  1  0  0  1  0   0   1   0   1   1   1   1   1   1   0   1      
//   z   1  0  1  0  0  1  1  0  0  1  1   1   1   1   0   1   0   1   1   0   1   0   1  
//   s   0  1                                                                             
// takt:  3
//   x   0  0  1  1  1  1  1  0  0  0  0   0   0   1   1   0   1   0   0                  
//   y   1  1  1  1  1  0  1  1  0  0  1   0   0   1   0   1   1   1   1   1   1   0      
//   z   1  0  1  0  0  1  1  0  0  1  1   1   1   1   0   1   0   1   1   0   1   0   1  
//   s   0  1  1                                                                          
// takt:  4
//   x   0  0  1  1  1  1  1  0  0  0  0   0   0   1   1   0   1   0   0                  
//   y   0  1  1  1  1  1  0  1  1  0  0   1   0   0   1   0   1   1   1   1   1   1      
//   z   0  1  0  1  0  0  1  1  0  0  1   1   1   1   1   0   1   0   1   1   0   1   0  
//   s   0  1  1  1                                                                       
// takt:  5
//   x   0  0  0  1  1  1  1  1  0  0  0   0   0   0   1   1   0   1   0                  
//   y   1  0  1  1  1  1  1  0  1  1  0   0   1   0   0   1   0   1   1   1   1   1      
//   z   0  1  0  1  0  0  1  1  0  0  1   1   1   1   1   0   1   0   1   1   0   1   0  
//   s   0  1  1  1  1                                                                    
// takt:  6
//   x   1  0  0  0  1  1  1  1  1  0  0   0   0   0   0   1   1   0   1                  
//   y   1  1  0  1  1  1  1  1  0  1  1   0   0   1   0   0   1   0   1   1   1   1      
//   z   0  1  0  1  0  0  1  1  0  0  1   1   1   1   1   0   1   0   1   1   0   1   0  
//   s   0  1  1  1  1  1                                                                 
// takt:  7
//   x   0  1  0  0  0  1  1  1  1  1  0   0   0   0   0   0   1   1   0                  
//   y   1  1  1  0  1  1  1  1  1  0  1   1   0   0   1   0   0   1   0   1   1   1      
//   z   1  0  1  0  1  0  0  1  1  0  0   1   1   1   1   1   0   1   0   1   1   0   1  
//   s   0  1  1  1  1  1  0                                                              
// takt:  8
//   x   0  0  1  0  0  0  1  1  1  1  1   0   0   0   0   0   0   1   1                  
//   y   1  1  1  1  0  1  1  1  1  1  0   1   1   0   0   1   0   0   1   0   1   1      
//   z   1  0  1  0  1  0  0  1  1  0  0   1   1   1   1   1   0   1   0   1   1   0   1  
//   s   0  1  1  1  1  1  0  0                                                           
// takt:  9
//   x   0  0  1  0  0  0  1  1  1  1  1   0   0   0   0   0   0   1   1                  
//   y   1  1  1  1  1  0  1  1  1  1  1   0   1   1   0   0   1   0   0   1   0   1      
//   z   0  1  0  1  0  1  0  0  1  1  0   0   1   1   1   1   1   0   1   0   1   1   0  
//   s   0  1  1  1  1  1  0  0  1                                                        
// takt:  10
//   x   0  0  0  1  0  0  0  1  1  1  1   1   0   0   0   0   0   0   1                  
//   y   1  1  1  1  1  1  0  1  1  1  1   1   0   1   1   0   0   1   0   0   1   0      
//   z   0  1  0  1  0  1  0  0  1  1  0   0   1   1   1   1   1   0   1   0   1   1   0  
//   s   0  1  1  1  1  1  0  0  1  0                                                     
// takt:  11
//   x   1  0  0  0  1  0  0  0  1  1  1   1   1   0   0   0   0   0   0                  
//   y   0  1  1  1  1  1  1  0  1  1  1   1   1   0   1   1   0   0   1   0   0   1      
//   z   0  1  0  1  0  1  0  0  1  1  0   0   1   1   1   1   1   0   1   0   1   1   0  
//   s   0  1  1  1  1  1  0  0  1  0  1                                                  
// takt:  12
//   x   0  1  0  0  0  1  0  0  0  1  1   1   1   1   0   0   0   0   0                  
//   y   1  0  1  1  1  1  1  1  0  1  1   1   1   1   0   1   1   0   0   1   0   0      
//   z   0  1  0  1  0  1  0  0  1  1  0   0   1   1   1   1   1   0   1   0   1   1   0  
//   s   0  1  1  1  1  1  0  0  1  0  1   1                                              
// takt:  13
//   x   1  0  1  0  0  0  1  0  0  0  1   1   1   1   1   0   0   0   0                  
//   y   1  0  1  1  1  1  1  1  0  1  1   1   1   1   0   1   1   0   0   1   0   0      
//   z   0  0  1  0  1  0  1  0  0  1  1   0   0   1   1   1   1   1   0   1   0   1   1  
//   s   0  1  1  1  1  1  0  0  1  0  1   1   0                                          
// takt:  14
//   x   1  0  1  0  0  0  1  0  0  0  1   1   1   1   1   0   0   0   0                  
//   y   0  1  0  1  1  1  1  1  1  0  1   1   1   1   1   0   1   1   0   0   1   0      
//   z   0  0  0  1  0  1  0  1  0  0  1   1   0   0   1   1   1   1   1   0   1   0   1  
//   s   0  1  1  1  1  1  0  0  1  0  1   1   0   1                                      
// takt:  15
//   x   1  0  1  0  0  0  1  0  0  0  1   1   1   1   1   0   0   0   0                  
//   y   0  0  1  0  1  1  1  1  1  1  0   1   1   1   1   1   0   1   1   0   0   1      
//   z   0  0  0  0  1  0  1  0  1  0  0   1   1   0   0   1   1   1   1   1   0   1   0  
//   s   0  1  1  1  1  1  0  0  1  0  1   1   0   1   1                                  
// takt:  16
//   x   1  1  0  1  0  0  0  1  0  0  0   1   1   1   1   1   0   0   0                  
//   y   1  0  0  1  0  1  1  1  1  1  1   0   1   1   1   1   1   0   1   1   0   0      
//   z   1  0  0  0  0  1  0  1  0  1  0   0   1   1   0   0   1   1   1   1   1   0   1  
//   s   0  1  1  1  1  1  0  0  1  0  1   1   0   1   1   1                              
// takt:  17
//   x   1  1  1  0  1  0  0  0  1  0  0   0   1   1   1   1   1   0   0                  
//   y   1  0  0  1  0  1  1  1  1  1  1   0   1   1   1   1   1   0   1   1   0   0      
//   z   0  1  0  0  0  0  1  0  1  0  1   0   0   1   1   0   0   1   1   1   1   1   0  
//   s   0  1  1  1  1  1  0  0  1  0  1   1   0   1   1   1   1                          
// takt:  18
//   x   0  1  1  1  0  1  0  0  0  1  0   0   0   1   1   1   1   1   0                  
//   y   0  1  0  0  1  0  1  1  1  1  1   1   0   1   1   1   1   1   0   1   1   0      
//   z   0  0  1  0  0  0  0  1  0  1  0   1   0   0   1   1   0   0   1   1   1   1   1  
//   s   0  1  1  1  1  1  0  0  1  0  1   1   0   1   1   1   1   0                      
// takt:  19
//   x   1  0  1  1  1  0  1  0  0  0  1   0   0   0   1   1   1   1   1                  
//   y   0  1  0  0  1  0  1  1  1  1  1   1   0   1   1   1   1   1   0   1   1   0      
//   z   1  0  0  1  0  0  0  0  1  0  1   0   1   0   0   1   1   0   0   1   1   1   1  
//   s   0  1  1  1  1  1  0  0  1  0  1   1   0   1   1   1   1   0   1                  
// takt:  20
//   x   1  0  1  1  1  0  1  0  0  0  1   0   0   0   1   1   1   1   1                  
//   y   0  0  1  0  0  1  0  1  1  1  1   1   1   0   1   1   1   1   1   0   1   1      
//   z   1  1  0  0  1  0  0  0  0  1  0   1   0   1   0   0   1   1   0   0   1   1   1  
//   s   0  1  1  1  1  1  0  0  1  0  1   1   0   1   1   1   1   0   1   0              
// takt:  21
//   x   1  1  0  1  1  1  0  1  0  0  0   1   0   0   0   1   1   1   1                  
//   y   0  0  1  0  0  1  0  1  1  1  1   1   1   0   1   1   1   1   1   0   1   1      
//   z   1  1  1  0  0  1  0  0  0  0  1   0   1   0   1   0   0   1   1   0   0   1   1  
//   s   0  1  1  1  1  1  0  0  1  0  1   1   0   1   1   1   1   0   1   0   1          
// takt:  22
//   x   1  1  0  1  1  1  0  1  0  0  0   1   0   0   0   1   1   1   1                  
//   y   1  0  0  1  0  0  1  0  1  1  1   1   1   1   0   1   1   1   1   1   0   1      
//   z   0  1  1  1  0  0  1  0  0  0  0   1   0   1   0   1   0   0   1   1   0   0   1  
//   s   0  1  1  1  1  1  0  0  1  0  1   1   0   1   1   1   1   0   1   0   1   1      
// takt:  23
//   x   1  1  1  0  1  1  1  0  1  0  0   0   1   0   0   0   1   1   1                  
//   y   1  0  0  1  0  0  1  0  1  1  1   1   1   1   0   1   1   1   1   1   0   1      
//   z   1  0  1  1  1  0  0  1  0  0  0   0   1   0   1   0   1   0   0   1   1   0   0  
//   s   0  1  1  1  1  1  0  0  1  0  1   1   0   1   1   1   1   0   1   0   1   1   1  


// RC4

function generateRow({i, j, t, St, s}: {i?: number, j?: number, t?: number, St?: number, s: number[]}) {
    return {
        i: i ?? "",
        j: j ?? "",
        t: t ?? "",
        St: St ?? "",
        ...(Object.fromEntries(s.map((v, i) => (["S" + i, v]))))
    }
}

const n = 4;
const l = 32;

const key = OTP.generateKey(l);
const keyCopy = [...key];
const k = [];
while (key.length) {
    const bits = key.splice(0, n).join("");
    const decimal = parseInt(bits, 2);
    k.push(decimal);
}
// console.log(k);
for(let i = k.length; i < Math.pow(2, n); i++ ) 
    k.push(k[i % (l/n)]);
// console.log(k);
const s: number[] = [];
for(let i = 0; i < Math.pow(2, n); i++)
    s.push(i);
// console.log(s);
const t = [];
t.push(generateRow({j: 0, s}))

let j = 0;
for(let i = 0; i < Math.pow(2, n); i++) {
    j = (j + s[i] + k[i]) % Math.pow(2, n);
    let temp = s[i];
    s[i] = s[j];
    s[j] = temp;
    t.push(generateRow({i, j, s}));
}
let i = 0;
j = 0;
for(let r = 0; r < l; r++) {
    i = (i + 1) % Math.pow(2, n);
    j = (j + s[i]) % Math.pow(2, n);
    let temp = s[i];
    s[i] = s[j];
    s[j] = temp;
    temp = (s[i] + s[j]) % Math.pow(2, n);
    t.push(generateRow({i, j, s, St: s[temp], t: temp}));
}

console.log("n:", n, "\tl:", l);
console.log("Key", keyCopy.join(""));
console.table([Object.fromEntries(k.map((v, i) => (["K" + i, v])))])
console.table(t);

// n: 4    l: 32
// Key 10011001011011011001100001100011

//  K0  K1  K2  K3  K4  K5  K6  K7  K8  K9  K10  K11  K12  K13  K14  K15 
//  9   9   6   13  9   8   6   3   9   9    6   13    9    8    6    3  

//  i   j   t   St  S0  S1  S2  S3  S4  S5  S6  S7  S8  S9  S10  S11  S12  S13  S14  S15 
//      0           0   1   2   3   4   5   6   7   8   9   10   11   12   13   14   15  
//  0   9           9   1   2   3   4   5   6   7   8   0   10   11   12   13   14   15  
//  1   3           9   3   2   1   4   5   6   7   8   0   10   11   12   13   14   15  
//  2   11          9   3   11  1   4   5   6   7   8   0   10    2   12   13   14   15  
//  3   9           9   3   11  0   4   5   6   7   8   1   10    2   12   13   14   15  
//  4   6           9   3   11  0   6   5   4   7   8   1   10    2   12   13   14   15  
//  5   3           9   3   11  5   6   0   4   7   8   1   10    2   12   13   14   15  
//  6   13          9   3   11  5   6   0   13  7   8   1   10    2   12    4   14   15  
//  7   7           9   3   11  5   6   0   13  7   8   1   10    2   12    4   14   15  
//  8   8           9   3   11  5   6   0   13  7   8   1   10    2   12    4   14   15  
//  9   2           9   3   1   5   6   0   13  7   8   11  10    2   12    4   14   15  
//  10  2           9   3   10  5   6   0   13  7   8   11   1    2   12    4   14   15  
//  11  1           9   2   10  5   6   0   13  7   8   11   1    3   12    4   14   15  
//  12  6           9   2   10  5   6   0   12  7   8   11   1    3   13    4   14   15  
//  13  2           9   2   4   5   6   0   12  7   8   11   1    3   13   10   14   15  
//  14  6           9   2   4   5   6   0   14  7   8   11   1    3   13   10   12   15  
//  15  8           9   2   4   5   6   0   14  7   15  11   1    3   13   10   12    8  
//  1   2   6   14  9   4   2   5   6   0   14  7   15  11   1    3   13   10   12    8  
//  2   4   8   15  9   4   6   5   2   0   14  7   15  11   1    3   13   10   12    8  
//  3   9   0   9   9   4   6   11  2   0   14  7   15  5    1    3   13   10   12    8  
//  4   11  5   0   9   4   6   11  3   0   14  7   15  5    1    2   13   10   12    8  
//  5   11  2   6   9   4   6   11  3   2   14  7   15  5    1    0   13   10   12    8  
//  6   9   3   11  9   4   6   11  3   2   5   7   15  14   1    0   13   10   12    8  
//  7   0   0   7   7   4   6   11  3   2   5   9   15  14   1    0   13   10   12    8  
//  8   15  7   9   7   4   6   11  3   2   5   9   8   14   1    0   13   10   12   15  
//  9   13  8   8   7   4   6   11  3   2   5   9   8   10   1    0   13   14   12   15  
//  10  14  13  14  7   4   6   11  3   2   5   9   8   10  12    0   13   14    1   15  
//  11  14  1   4   7   4   6   11  3   2   5   9   8   10  12    1   13   14    0   15  
//  12  11  14  0   7   4   6   11  3   2   5   9   8   10  12   13    1   14    0   15  
//  13  9   8   8   7   4   6   11  3   2   5   9   8   14  12   13    1   10    0   15  
//  14  9   14  14  7   4   6   11  3   2   5   9   8   0   12   13    1   10   14   15  
//  15  8   7   9   7   4   6   11  3   2   5   9   15  0   12   13    1   10   14    8  
//  0   15  15  7   8   4   6   11  3   2   5   9   15  0   12   13    1   10   14    7  
//  1   3   15  7   8   11  6   4   3   2   5   9   15  0   12   13    1   10   14    7  
//  2   9   6   5   8   11  0   4   3   2   5   9   15  6   12   13    1   10   14    7  
//  3   13  14  14  8   11  0   10  3   2   5   9   15  6   12   13    1    4   14    7  
//  4   0   11  13  3   11  0   10  8   2   5   9   15  6   12   13    1    4   14    7  
//  5   2   2   2   3   11  2   10  8   0   5   9   15  6   12   13    1    4   14    7  
//  6   7   14  14  3   11  2   10  8   0   9   5   15  6   12   13    1    4   14    7  
//  7   12  6   9   3   11  2   10  8   0   9   1   15  6   12   13    5    4   14    7  
//  8   11  12  5   3   11  2   10  8   0   9   1   13  6   12   15    5    4   14    7  
//  9   1   1   6   3   6   2   10  8   0   9   1   13  11  12   15    5    4   14    7  
//  10  13  0   3   3   6   2   10  8   0   9   1   13  11   4   15    5   12   14    7  
//  11  12  4   8   3   6   2   10  8   0   9   1   13  11   4    5   15   12   14    7  
//  12  11  4   8   3   6   2   10  8   0   9   1   13  11   4   15    5   12   14    7  
//  13  7   13  1   3   6   2   10  8   0   9   12  13  11   4   15    5    1   14    7  
//  14  5   14  0   3   6   2   10  8   14  9   12  13  11   4   15    5    1    0    7  
//  15  12  12  7   3   6   2   10  8   14  9   12  13  11   4   15    7    1    0    5  
//  0   15  8   13  5   6   2   10  8   14  9   12  13  11   4   15    7    1    0    3  